using NUnit.Framework;
using PenTestTask;
using System;
using System.IO;
using System.Diagnostics;
using Assert = NUnit.Framework.Assert;
using System.Collections.Generic;

namespace Tests
{
    public class Tests
    {
        private readonly string pathToFile = @"/Files/TestFile.txt";
        private string GetTestFilePath()
        {
            string dirName = AppDomain.CurrentDomain.BaseDirectory; 
            DirectoryInfo parentDir = new FileInfo(dirName).Directory.Parent.Parent.Parent;
            return parentDir.FullName + pathToFile;
        }

        [Test]
        public void TestPenConstructorShouldCorrectAssingValue()
        {
            Pen pen = new Pen(100);
            Assert.IsTrue(pen.isWork(), "Pen doesn't work, value assinged incorrectly");
        }

        [Test]
        public void TestPenConstructorNegativeShouldCorrectAssingValue()
        {
            Pen pen = new Pen(0);
            Assert.IsFalse(pen.isWork(), "Pen works, value assinged incorrectly");
        }

        [Test]
        public void TestPenGetColorShouldGetCorrectColor()
        {
            Pen pen = new Pen(100, 1.0 ,"Black");
            Assert.AreEqual("Black", pen.getColor(), "Colors don't match");
        }

        [Test]
        public void TestPenWriteShouldPrinteNothing()
        {
            Pen pen = new Pen(0);
            Assert.AreEqual("", pen.write("123"), "Result words don't match");
        }

        [Test]
        public void TestPenWriteShouldPrintFullWord()
        {
            Pen pen = new Pen(1000);
            Assert.AreEqual("1234567890", pen.write("1234567890"), "Result words don't match");
        }

        [Test]
        public void TestPenWriteShouldHalfOfWord()
        {
            Pen pen = new Pen(5, 1.0);
            Assert.AreEqual("12345", pen.write("1234567890"), "Result words don't match");
        }

        [Test]
        public void TestPenWorkShouldNotWorkAfterFullWrite()
        {
            Pen pen = new Pen(10, 2);
            pen.write("12345");
            Assert.IsFalse(pen.isWork(), "Pen works when ink is empty");
        }

        public void TestPenWorkShouldNotWorkAfterWordGiggerThanInkContainerValue()
        {
            Pen pen = new Pen(10, 2);
            pen.write("12345667890");
            Assert.IsFalse(pen.isWork(), "Pen works when ink is empty");
        }

        public void TestPenWorkShouldReturnEmptyStringIfNotWorking()
        {
            Pen pen = new Pen(10, 2);
            pen.write("1234567890");
            Assert.AreEqual("", pen.write("1234567890"), "Pen writes word when ink is empty");
        }

        [Test]
        public void TestPenWriteShouldThrowOutOfRangeExeption()
        {
            Pen pen = new Pen(100, 1000);
            Assert.Throws<ArgumentOutOfRangeException>(() => pen.write("123"), "Programm don't throws an OutOfRangeExeptio");
        }

        [Test]
        public void TestDoSomethingColorShouldBeDefault()
        {
            Pen pen = new Pen(10);
            Stream myFile = File.Create(GetTestFilePath());
            using (TextWriterTraceListener listener = new TextWriterTraceListener(myFile))
            {
                Trace.Listeners.Add(listener);
                pen.doSomethingElse();
                Trace.Flush();
            }
            var fileData = new List<string>(File.ReadAllLines(GetTestFilePath()));
            Assert.AreEqual("BLUE", fileData[0], "Colors don't match");
        }

        [Test]
        public void TestDoSomethingColorShouldBeNew()
        {
            string newColor = "WHITE";
            Pen pen = new Pen(10, 1.0, newColor);
            Stream myFile = File.Create(GetTestFilePath());
            using (TextWriterTraceListener listener = new TextWriterTraceListener(myFile))
            {
                Trace.Listeners.Add(listener);
                pen.doSomethingElse();
                Trace.Flush();
            }
            var fileData = new List<string>(File.ReadAllLines(GetTestFilePath()));
            Assert.AreEqual(newColor, fileData[0], "Colors don't match");
        }
    }
}
using NUnit.Framework;
using PenTestTask;
using System;
using System.IO;
using System.Diagnostics;
using Assert = NUnit.Framework.Assert;
using System.Collections.Generic;

namespace Tests
{
    public class Tests
    {
        private string pathToFile  = @"../../../Files/TestFile.txt";

        [Test]
        public void TestPenConstructor_ShouldCorrectAssingValue()
        {
            Pen pen = new Pen(100);
            Assert.IsTrue(pen.isWork());
        }

        [Test]
        public void TestPenConstructorNegative_ShouldCorrectAssingValue()
        {
            Pen pen = new Pen(0);
            Assert.IsFalse(pen.isWork());
        }

        [Test]
        public void TestPenGetColor_ShouldGetCorrectColor()
        {
            Pen pen = new Pen(100, 1.0 ,"Black");
            Assert.AreEqual("Black", pen.getColor());
        }

        [Test]
        public void TestPenWrite_ShouldPrinteNothing()
        {
            Pen pen = new Pen(0);
            Assert.AreEqual("", pen.write("123"));
        }

        [Test]
        public void TestPenWrite_ShouldPrintFullWord()
        {
            Pen pen = new Pen(1000);
            Assert.AreEqual("1234567890", pen.write("1234567890"));
        }

        [Test]
        public void TestPenWrite_ShouldHalfOfWord()
        {
            Pen pen = new Pen(5, 1.0);
            Assert.AreEqual("12345", pen.write("1234567890"));
        }

        [Test]
        public void TestPenWork_ShouldNotWorkAfterFullWrite()
        {
            Pen pen = new Pen(10, 2);
            pen.write("12345");
            Assert.IsFalse(pen.isWork());
        }

        public void TestPenWork_ShouldNotWorkAfterWordGiggerThanInkContainerValue()
        {
            Pen pen = new Pen(10, 2);
            pen.write("12345667890");
            Assert.IsFalse(pen.isWork());
        }

        public void TestPenWork_ShouldReturnEmptyStringIfNotWorking()
        {
            Pen pen = new Pen(10, 2);
            pen.write("1234567890");
            Assert.Equals("",pen.write("1234567890"));
        }

        [Test]
        public void TestPenWrite_ShouldThrowOutOfRangeExeption()
        {
            Pen pen = new Pen(100, 1000);
            Assert.Throws<ArgumentOutOfRangeException>(() => pen.write("123"));
        }

        [Test]
        public void TestDoSomething_ColorShouldBeDefault()
        {
            Pen pen = new Pen(10);
            Stream myFile = File.Create(pathToFile);
            using (TextWriterTraceListener listener = new TextWriterTraceListener(myFile))
            {
                Trace.Listeners.Add(listener);
                pen.doSomethingElse();
                Trace.Flush();
            }
            var fileData = new List<string>(File.ReadAllLines(pathToFile));
            Assert.AreEqual("BLUE", fileData[0]);
        }

        [Test]
        public void TestDoSomething_ColorShouldBeNew()
        {
            string newColor = "WHITE";
            Pen pen = new Pen(10, 1.0, newColor);
            Stream myFile = File.Create(pathToFile);
            using (TextWriterTraceListener listener = new TextWriterTraceListener(myFile))
            {
                Trace.Listeners.Add(listener);
                pen.doSomethingElse();
                Trace.Flush();
            }
            var fileData = new List<string>(File.ReadAllLines(pathToFile));
            Assert.AreEqual(newColor, fileData[0]);
        }
    }
}